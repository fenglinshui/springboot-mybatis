package conoha.dao;

import conoha.model.PixivImage;
import conoha.model.PixivImageExample;
import org.apache.ibatis.annotations.*;

import java.util.List;

public interface PixivImageMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pixiv_image_show
     *
     * @mbggenerated
     */
    @Delete({
            "delete from pixiv_image_show",
            "where pixiv_id = #{pixivId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long pixivId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pixiv_image_show
     *
     * @mbggenerated
     */
    @Insert({
            "insert into pixiv_image_show (pixiv_id, local_path, ",
            "small_image_url, large_image_url, ",
            "author, title, tag, ",
            "isDeleted)",
            "values (#{pixivId,jdbcType=BIGINT}, #{localPath,jdbcType=VARCHAR}, ",
            "#{smallImageUrl,jdbcType=VARCHAR}, #{largeImageUrl,jdbcType=VARCHAR}, ",
            "#{author,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{tag,jdbcType=VARCHAR}, ",
            "#{isdeleted,jdbcType=BIT})"
    })
    int insert(PixivImage record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pixiv_image_show
     *
     * @mbggenerated
     */
    int insertSelective(PixivImage record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pixiv_image_show
     *
     * @mbggenerated
     */
    List<PixivImage> selectByExample(PixivImageExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pixiv_image_show
     *
     * @mbggenerated
     */
    @Select({
            "select",
            "pixiv_id, local_path, small_image_url, large_image_url, author, title, tag, ",
            "isDeleted",
            "from pixiv_image_show",
            "where pixiv_id = #{pixivId,jdbcType=BIGINT}"
    })
    @ResultMap("BaseResultMap")
    PixivImage selectByPrimaryKey(Long pixivId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pixiv_image_show
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(PixivImage record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pixiv_image_show
     *
     * @mbggenerated
     */
    @Update({
            "update pixiv_image_show",
            "set local_path = #{localPath,jdbcType=VARCHAR},",
            "small_image_url = #{smallImageUrl,jdbcType=VARCHAR},",
            "large_image_url = #{largeImageUrl,jdbcType=VARCHAR},",
            "author = #{author,jdbcType=VARCHAR},",
            "title = #{title,jdbcType=VARCHAR},",
            "tag = #{tag,jdbcType=VARCHAR},",
            "isDeleted = #{isdeleted,jdbcType=BIT}",
            "where pixiv_id = #{pixivId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(PixivImage record);

    @Select({
            "select",
            "pixiv_id",
            "from pixiv_image_show where isDeleted <> 1 or ISNULL(isDeleted) limit #{param1,jdbcType=INTEGER},#{param2,jdbcType=INTEGER}"
    })
//    @ResultMap("BaseResultMap")
    List<Integer> getIds(Integer begin, Integer num);

    @Select({"select count(pixiv_id) from pixiv_image_show where  isDeleted <> 1 or ISNULL(isDeleted)"})
    int getTotalNumber();

    @Select({
            "select",
            "pixiv_id, local_path, small_image_url, large_image_url, author, title, tag, ",
            "isDeleted",
            "from pixiv_image_show",
            "where pixiv_id in ${list}"
    })
    @ResultMap("BaseResultMap")
    List<PixivImage> getEntryByIds(@Param("list") String list);

    @Update({
            "update pixiv_image_show",
            "set",
            "isDeleted = #{isdeleted,jdbcType=BIT}",
            "where pixiv_id = #{pixivId,jdbcType=BIGINT}"
    })
    int deletePixivImg(PixivImage record);
}